{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","target","name","value","resultNum","val","isValid","isNaN","setState","state","num1","num2","sum","parseInt","toString","className","autoFocus","type","this","onChange","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PA+EeA,G,kBA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,aAAe,SAACC,GAAW,IAAD,IACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAERC,EAAY,CAChBC,IAAKF,EACLG,QAAmB,KAAVH,IAAiBI,MAAMJ,IAGlC,EAAKK,UAAL,mBACGN,EAAOE,GADV,oBAEO,IAFP,GAGG,WAAO,IAAD,EACgB,EAAKK,MAApBC,EADD,EACCA,KAAMC,EADP,EACOA,KAEVD,EAAKJ,SAAWK,EAAKL,SACvB,EAAKE,SAAS,CACZI,KAAMC,SAASH,EAAKL,KAAOQ,SAASF,EAAKN,MAAMS,gBA7BrD,EAAKL,MAAQ,CACXC,KAAM,CACJL,IAAK,IACLC,SAAS,GAEXK,KAAM,CACJN,IAAK,IACLC,SAAS,GAEXM,IAAK,KAZU,E,sEAsCT,IAAD,OAIP,OACE,yBAAKG,UAAU,kBACb,wBAAIA,UAAU,oBAAd,+CACA,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,iEACb,yBAAKA,UAAU,0BACb,2BACEC,WAAS,EACTC,KAAK,OACLF,UAAS,sBAAiBG,KAAKT,MAAMC,KAAKJ,QAAU,GAAK,eACzDJ,KAAK,OACLC,MAAOe,KAAKT,MAAMC,KAAKL,IACvBc,SAAU,SAACnB,GAAD,OAAW,EAAKD,aAAaC,OAE3C,kCACA,yBAAKe,UAAU,0BACf,2BACIE,KAAK,OACLF,UAAS,sBAAiBG,KAAKT,MAAME,KAAKL,QAAU,GAAK,eACzDJ,KAAK,OACLC,MAAOe,KAAKT,MAAME,KAAKN,IACvBc,SAAU,SAACnB,GAAD,OAAW,EAAKD,aAAaC,OAE3C,kCACA,yBAAKe,UAAU,0BACb,2BAAOK,UAAQ,EAACH,KAAK,OAAOF,UAAU,eAAeb,KAAK,MAAMC,MAAOe,KAAKT,MAAMG,c,GApE9ES,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.b3d63735.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      num1: {\n        val: '0',\n        isValid: true\n      },\n      num2: {\n        val: '0',\n        isValid: true\n      },\n      sum: '0',\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    const resultNum = {\n      val: value,\n      isValid: value !== '' && !isNaN(value)\n    }\n\n    this.setState({\n      [name]: resultNum,\n      sum: ''\n    }, () => {\n      const { num1, num2 } = this.state;\n\n      if (num1.isValid && num2.isValid) {\n        this.setState({\n          sum: (parseInt(num1.val) + parseInt(num2.val)).toString(),\n        })\n      }\n    })\n  }\n\n  render() {\n\n    const invalidClass = 'is-invalid';\n\n    return (\n      <div className='container mt-5'>\n        <h3 className='text-center mb-3'>Chương trình tính tổng</h3>\n        <div className='row justify-content-center'>\n          <div className='col col-md-10 col-lg-8 d-flex align-items-center calc-wrapper'>\n            <div className=\"form-group input-field\">\n              <input \n                autoFocus \n                type=\"text\" \n                className={`form-control${this.state.num1.isValid ? '' : ' ' + invalidClass}`} \n                name=\"num1\" \n                value={this.state.num1.val} \n                onChange={(event) => this.handleChange(event)} />\n            </div>\n            <div>+</div>\n            <div className=\"form-group input-field\">\n            <input \n                type=\"text\" \n                className={`form-control${this.state.num2.isValid ? '' : ' ' + invalidClass}`} \n                name=\"num2\" \n                value={this.state.num2.val} \n                onChange={(event) => this.handleChange(event)} />\n            </div>\n            <div>=</div>\n            <div className=\"form-group input-field\">\n              <input disabled type=\"text\" className=\"form-control\" name=\"sum\" value={this.state.sum} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}